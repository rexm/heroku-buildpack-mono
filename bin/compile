#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

DEPENDENCY_S3_BUCKET_PATH="http://s3.amazonaws.com/mono-dependencies"
MONO_VERSION="3.2.8"
XSP_VERSION="8a31bc625727594d42f94173768bee5cf8afd0a4"
NGINX_VERSION="1.5.2"

BUILD_DIR=$1
CACHE_DIR=$2

function conditional_download() {
  DOWNLOAD_URL="$1"
  DESTINATION="$2"

  if [ ! -d ${DESTINATION} ]; then
    rm -rf ${DESTINATION}
    mkdir -p ${DESTINATION}
    echo "-----> Downloading ${DOWNLOAD_URL}"
    curl ${DOWNLOAD_URL} -s | tar xz -C ${DESTINATION}
  fi
}

LP_DIR=`cd $(dirname $0); cd ..; pwd`
cd ${BUILD_DIR}
mkdir -p ${CACHE_DIR}

MONO_CACHE_LOCATION=${CACHE_DIR}/mono-${MONO_VERSION}
conditional_download ${DEPENDENCY_S3_BUCKET_PATH}/mono-${MONO_VERSION}.tar.gz ${MONO_CACHE_LOCATION}

if [ ! -d "${CACHE_DIR}/NuGet.targets" ]; then
  echo "-----> Fetching fixed NuGet.targets"
  curl ${DEPENDENCY_S3_BUCKET_PATH}/vendor/NuGet/NuGet.targets -s -o ${CACHE_DIR}/NuGet.targets
fi

cp -r "${MONO_CACHE_LOCATION}/mono" .
# TODO: this is done because `ln -s` causes nuget to fail in subtle ways. Fix please
# ln -s "$BUILD_DIR/mono" /app
cp -r "${MONO_CACHE_LOCATION}/mono" /app/.

# find a solution file
SLN=$(find . -maxdepth 1 -iname "*.sln")
if [ $( echo "${SLN}" | wc -l ) -gt 1 ]; then
  echo "-----> Too many *.sln files"
  exit 1
fi

if [ "${SLN}" == "" ]; then
  echo "-----> No *.sln file found"
  exit 1
fi

echo "-----> Compiling Mono application"

export PATH="/app/mono/bin:${PATH}"
export LD_LIBRARY_PATH="/app/mono/lib:${LD_LIBRARY_PATH}"

# Add certs to trust store
cp -r ${LP_DIR}/.config ~/.
cp -r ${LP_DIR}/.config ${BUILD_DIR}/.

# Find all NuGet target files and overwrite with known good version
find `pwd` -name "NuGet.targets" -exec cp -f ${CACHE_DIR}/NuGet.targets {} \;

# Add symbolic link to deal with NuGet casing breakage
find `pwd` -name "NuGet.targets" -exec dirname {} \; | xargs -I {} ln -s {}/NuGet.targets {}/nuget.targets

BUILD_CACHE_LOCATION=${CACHE_DIR}/build/
mkdir -p ${BUILD_CACHE_LOCATION}

sudo mozroots --import --machine --sync
sudo certmgr -ssl -m https://go.microsoft.com
sudo certmgr -ssl -m https://nugetgallery.blob.core.windows.net
sudo certmgr -ssl -m https://nuget.org
EnableNuGetPackageRestore=true xbuild /property:Configuration=Release /property:OutDir=${BUILD_CACHE_LOCATION} ${SLN}

cp -r ${BUILD_CACHE_LOCATION}* ${BUILD_DIR}

mkdir -p ${BUILD_DIR}/.profile.d
cp -n ${LP_DIR}/.profile.d/* ${BUILD_DIR}/.profile.d/

if [ -d "$BUILD_DIR/_PublishedWebsites/" ]; then
  XSP_CACHE_LOCATION=${CACHE_DIR}/xsp-${XSP_VERSION}
  conditional_download ${DEPENDENCY_S3_BUCKET_PATH}/xsp-${XSP_VERSION}.tar.gz ${XSP_CACHE_LOCATION}
  cp -r ${XSP_CACHE_LOCATION}/xsp .
  cp -r ${XSP_CACHE_LOCATION}/xsp/lib/mono/gac/* ./mono/lib/mono/gac/

  NGINX_CACHE_LOCATION=${CACHE_DIR}/nginx-{NGINX_VERSION}
  conditional_download ${DEPENDENCY_S3_BUCKET_PATH}/nginx-${NGINX_VERSION}.tar.gz ${NGINX_CACHE_LOCATION}
  mkdir -p ${BUILD_DIR}/nginx
  cp ${NGINX_CACHE_LOCATION}/nginx ${BUILD_DIR}/nginx/.
  cp ${LP_DIR}/nginx/* ${BUILD_DIR}/nginx/.
fi

echo "-----> Build SUCCESS"
